{"version":3,"sources":["Data.js","Context.js","PrivateRoute.js","Components/Header.js","Components/Courses.js","Components/Form.js","Components/UserSignIn.js","Components/UserSignUp.js","Components/UserSignOut.js","Components/CourseDetail.js","Components/CreateCourse.js","Components/UpdateCourse.js","Components/DeleteCourse.js","Components/NotFound.js","Components/Forbidden.js","Components/UnhandledError.js","Components/ErrorBoundary.js","App.js","reportWebVitals.js","index.js"],"names":["Data","path","method","body","requiresAuth","credentials","url","options","headers","JSON","stringify","encodedCredentials","btoa","emailAddress","password","fetch","a","this","api","response","status","json","then","data","Error","user","errors","courses","catch","err","console","log","id","course","Context","React","createContext","Provider","props","userCookie","Cookies","get","courseCookie","useState","parse","authenticatedUser","setAuthUser","validCourseIDs","setValidCourseIDs","signIn","getUser","set","expires","value","actions","signOut","remove","setIDs","IDs","children","PrivateRoute","Component","component","rest","useContext","render","to","pathname","state","from","location","Header","authUser","firstName","lastName","className","Courses","setCourses","hasFetchedData","useRef","useEffect","current","getAllCourses","map","title","version","xmlns","x","y","viewBox","points","ErrorsDisplay","errorsDisplay","length","i","Form","cancel","submit","submitButtonText","elements","onSubmit","event","preventDefault","type","onClick","UserSignIn","history","useHistory","userValues","setUserValues","change","prevValues","target","name","push","document","querySelector","reset","htmlFor","onChange","UserSignUp","createUser","errs","UserSignOut","CourseDetail","useParams","setCourse","getCourse","userId","courseUserID","description","estimatedTime","materialsNeeded","CreateCourse","createCourse","UpdateCourse","useLocation","includes","parseInt","updateCourse","defaultValue","DeleteCourse","deleteCourse","NotFound","Forbidden","UnhandledError","ErrorBoundary","hasError","error","errorInfo","App","basename","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b055e580.chunk.js","sourcesContent":["/**\n * This is a helper class that provides utility methods\n * to allow the React client to talk to the Express server.\n */\nexport default class Data {\n    api(path, method='GET', body=null, requiresAuth=false, credentials=null) {\n        const url = 'https://thp9-restapi.herokuapp.com/api' + path;\n\n        const options = {\n            method,\n            headers: {\n                'Content-Type': 'application/json; charset=utf-8'\n            }\n        };\n\n        if (body !== null) {\n            options.body = JSON.stringify(body);\n        }\n\n        if (requiresAuth) {\n            const encodedCredentials = btoa(`${credentials.emailAddress}:${credentials.password}`);\n            options.headers['Authorization'] = `Basic ${encodedCredentials}`;\n        }\n\n        return fetch(url, options);\n    }\n\n    async getUser(emailAddress, password) {\n        const response = await this.api('/users', 'GET', null, true, { emailAddress, password });\n        if (response.status === 200) {\n            return response.json().then(data => data);\n        } else if (response.status === 401) {\n            return null;\n        } else {\n            throw new Error();\n        }\n    }\n\n    async createUser(user) {\n        const response = await this.api('/users', 'POST', user);\n        if (response.status === 201) {\n            return [];\n        } else if (response.status === 400) {\n            return response.json().then(data => {\n                return data.errors;\n            });\n        } else {\n            throw new Error();\n        }\n    }\n\n    async getAllCourses() {\n        const response = await this.api(`/courses`, 'GET');\n        if (response.status === 200) {\n            return response.json().then(data => data.courses).catch(err => console.log(err));\n        } else if (response.status === 400) {\n            return null;\n        } else {\n            throw new Error();\n        }\n    }\n\n    async getCourse(id) {\n        const response = await this.api(`/courses/${id}`, 'GET');\n        if (response.status === 200) {\n            return response.json().then(data => data.course).catch(err => console.log(err));\n        } else if (response.status === 400) {\n            return null;\n        } else {\n            throw new Error();\n        }\n    }\n\n    async createCourse(course, emailAddress, password) {\n        const response = await this.api('/courses', 'POST', course, true, { emailAddress, password });\n        if (response.status === 201) {\n            return [];\n        } else if (response.status === 400) {\n            return response.json().then(data => {\n                return data.errors;\n            });\n        } else {\n            throw new Error();\n        }\n    }\n\n    async updateCourse(id, course, emailAddress, password) {\n        const response = await this.api(`/courses/${id}`, 'PUT', course, true, { emailAddress, password });\n        if (response.status === 204) {\n            return [];\n        } else if (response.status === 400) {\n            return response.json().then(data => {\n                return data.errors;\n            }).catch(err => console.log(err));\n        } else {\n            throw new Error();\n        }\n    }\n\n    async deleteCourse(id, emailAddress, password) {\n        const response = await this.api(`/courses/${id}`, 'DELETE', null, true, { emailAddress, password });\n        if (response.status === 204) {\n            return [];\n        } else if (response.status === 400) {\n            return response.json().then(data => {\n                return data.errors;\n            }).catch(err => console.log(err));\n        } else {\n            throw new Error();\n        }\n    }\n}","/**\n * This file sets up the Context to allow data to pass throughout\n * the app component tree using the React Context API\n */\nimport React, { useState } from 'react';\nimport Data from './Data';\nimport Cookies from 'js-cookie';\n\nexport const Context = React.createContext();\n\nexport const Provider = (props) => {\n\n    const userCookie = Cookies.get('authenticatedUser');\n    const courseCookie = Cookies.get('validCourseIDs');\n\n    const [ authenticatedUser, setAuthUser ] = useState(\n        userCookie ? JSON.parse(userCookie) : null\n    );\n\n    const [ validCourseIDs, setValidCourseIDs ] = useState(\n        courseCookie ? courseCookie : null\n    );\n\n    const [ data ] = useState(new Data());\n\n    // Method that authenticates user and persists their info in global state\n    const signIn = async (emailAddress, password) => {\n        const { user } = await data.getUser(emailAddress, password);\n        if (user !== null) {\n            user.password = password;\n            setAuthUser(user);\n            Cookies.set('authenticatedUser', JSON.stringify(user), {expires: 1});\n        }\n        return user;\n    };\n\n    // Method that removes authenticated user from global atate\n    const signOut = () => {\n        setAuthUser(null);\n        Cookies.remove('authenticatedUser');\n    };\n\n    // Method that sets the array of valid course IDs\n    const setIDs = (IDs) => {\n        setValidCourseIDs(IDs);\n        Cookies.set('validCourseIDs', IDs, {expires: 1});\n    }\n\n    return (\n        <Context.Provider value={{ \n            authenticatedUser,\n            validCourseIDs,\n            data,\n            actions: { signIn, signOut, setIDs }\n        }}>\n            {props.children}\n        </Context.Provider>\n    );\n}","/**\n * This HOC (higher-order component) is used to configure routes\n * that require authentication (Create, Update, and Delete Courses)\n */\nimport { useContext } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { Context } from './Context';\n\nconst PrivateRoute = ({ component: Component, ...rest }) => {\n    const { authenticatedUser } = useContext(Context);\n    return (\n        <Route\n            {...rest}\n            render={props => authenticatedUser ? (\n                // If user is authenticated render the component\n                <Component {...props} />\n                ) : (\n                // If user is not authenticated redirect to login\n                <Redirect to={{ \n                    pathname: '/signin',\n                    state: { from: props.location } \n                }} />\n                )\n            }\n        />\n  );\n};\n\nexport default PrivateRoute;\n","/**\n * This component renders the top menu bar and buttons for signing\n * in, up, or out and a greeting when a user is logged in\n */\nimport { useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Context } from '../Context';\n\nconst Header = () => {\n    const { authenticatedUser } = useContext(Context);\n    \n    // Checks if a user is logged in\n    let authUser = '';\n    if (authenticatedUser) {\n        authUser = `${authenticatedUser.firstName} ${authenticatedUser.lastName}`;\n    }\n    \n    return (\n        <header>\n            <div className=\"wrap header--flex\">\n                <h1 className=\"header--logo\"><Link to=\"/\">Skills Academy Courses</Link></h1>\n                <nav>\n                    { /* If user is logged in, render greeting and \"Sign Out\" button */\n                    authenticatedUser ? \n                        <ul className=\"header--signedin\">\n                            <li>Welcome, {authUser}!</li>\n                            <li><Link to=\"/signout\">Sign Out</Link></li> \n                        </ul> \n                    : /* If user is not logged in render \"Sign In\" and \"Sign Up\" buttons */\n                        <ul className=\"header--signedout\">\n                            <li><Link to=\"/signup\">Sign Up</Link></li>\n                            <li><Link to=\"/signin\">Sign In</Link></li>\n                        </ul>\n                    }\n                </nav>\n            </div>\n        </header>\n    );\n};\n\nexport default Header;","/**\n * This component renders the list of courses for the home page,\n * links to each \"Course Detail\" page, and to the \"Create Course\" screen\n */\nimport { useState, useEffect, useContext, useRef } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Context } from '../Context';\n\nconst Courses = () => {\n    \n    /* courses is initialized as an array here (instead of an object like in the\n       other components) so that the courses.map call later will work properly */\n    const { data, actions } = useContext(Context);\n    const [ courses, setCourses ] = useState([]);\n    const hasFetchedData = useRef(false);\n\n    useEffect(() => {\n        if (!hasFetchedData.current) {\n            data.getAllCourses()\n                .then(courses => {\n                    setCourses(courses);\n                    if (courses && courses[1]) { actions.setIDs(courses.map(course => course.id)) };\n                    hasFetchedData.current = true;\n                });\n        }\n    }, [ actions, data ]);\n  \n    return (\n        <main>\n            <div className=\"wrap main--grid\">\n            {courses && courses[1] ?\n                    courses.map(course => (\n                        <Link \n                        className=\"course--module course--link\" \n                        to={`/courses/${course.id}`} \n                        key={course.id}>\n                            <h2 className=\"course--label\">Course</h2>\n                            <h3 className=\"course--title\">{course.title}</h3>\n                        </Link> ))\n                    : null\n                }\n                <Link className=\"course--module course--add--module\" to=\"/courses/create\">\n                    <span className=\"course--add--title\">\n                        <svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\"\n                        viewBox=\"0 0 13 13\" className=\"add\"><polygon points=\"7,6 7,0 6,0 6,6 0,6 0,7 6,7 6,13 7,13 7,7 13,7 13,6 \"></polygon></svg>\n                        New Course\n                    </span>\n                </Link>\n            </div>\n        </main>\n    );\n};\n\nexport default Courses;\n","/**\n * This component renders a form with \"Submit\" and \"Cancel\" \n * buttons and displays any validation errors\n */\nconst Form = (props) => {\n    \n    const {\n        cancel,\n        errors,\n        submit,\n        submitButtonText,\n        elements,\n    } = props;\n\n    function handleSubmit(event) {\n        event.preventDefault();\n        submit(event);\n    }\n\n    function handleCancel(event) {\n        event.preventDefault();\n        cancel(event);\n    }\n\n    return (\n        <div>\n            <ErrorsDisplay errors={errors} />\n            <form onSubmit={handleSubmit}>\n                {elements()}\n                <button \n                    className=\"button\" \n                    type=\"submit\">{submitButtonText}</button>\n                <button \n                    className=\"button button-secondary\" \n                    onClick={handleCancel}>Cancel</button>\n            </form>\n        </div>\n    );\n}\n\nconst ErrorsDisplay = ({errors}) => {\n    let errorsDisplay = null;\n\n    if (errors) {\n        if (errors.length) {\n            errorsDisplay = (\n                <div className=\"validation--errors\">\n                    <h3>Validation errors</h3>\n                    <ul>\n                        {errors.map((err, i) => <li key={i}>{err}</li>)}\n                    </ul>\n                </div>\n            );\n        }\n    }\n\n    return errorsDisplay;\n}\n\nexport default Form;\n","/**\n * This component renders a form allowing the user to sign in\n * or cancel and return to the default route (course list)\n */\nimport { useContext, useState } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport { Context } from '../Context';\nimport Form from './Form';\n\nconst UserSignIn = (props) => {\n\n    let history = useHistory();\n    const { actions } = useContext(Context);\n    const [ userValues, setUserValues ] = useState({\n        firstName: '',\n        lastName: '',\n        emailAddress: '',\n        password: '',\n        errors: []\n    });\n\n    // Destructuring user variables from state for later use\n    const { emailAddress, password, errors } = userValues;\n\n    // Handler for changes in input fields updates state\n    const change = (event) => {\n        setUserValues( prevValues => ({ \n            ...prevValues, \n            [event.target.name]: event.target.value \n        }));\n    };\n\n    // Handler for the form submit button (\"Sign In\") logs in user\n    const submit = () => {\n        const { from } = props.location.state || { from: { pathname: '/' } };\n        actions.signIn(emailAddress, password)\n            .then( user => {\n                if (user === null) {\n                    setUserValues({ errors: [ 'Sign-in was unsuccessful' ] });\n                    document.querySelector('FORM').reset();\n                } else {\n                    history.push(from);\n                    console.log(`SUCCESS! ${emailAddress} is now signed in!`);\n                }\n            }).catch( err => {\n                console.log(err);\n                history.push('/error');\n            });\n    };\n\n    // Handler for the cancel button returns to default route (course list)\n    const cancel = () => {\n        history.push('/');\n    }\n\n    return (\n        <main>\n            <div className=\"form--centered\">\n                <h2>Sign In</h2>\n                <Form\n                    cancel={cancel}\n                    errors={errors}\n                    submit={submit}\n                    submitButtonText=\"Sign In\"\n                    elements={ () => (\n                        <>\n                            <label htmlFor=\"emailAddress\">Email Address</label>\n                            <input \n                                id=\"emailAddress\" \n                                name=\"emailAddress\" \n                                type=\"email\"\n                                onChange={change} />\n\n                            <label htmlFor=\"password\">Password</label>\n                            <input \n                                id=\"password\" \n                                name=\"password\" \n                                type=\"password\"\n                                onChange={change} />\n                        </>\n                    )} />\n                <p>Don't have an account? Click here to <Link to=\"/signup\">sign up</Link>!</p>\n                \n            </div>\n        </main>\n    );\n};\n\nexport default UserSignIn;\n","/**\n * This component renders a form allowing a user to create a new account\n * or cancel and return to the default route (course list)\n */\nimport { useContext, useState } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport { Context } from '../Context';\nimport Form from './Form';\n\nconst UserSignUp = (props) => {\n\n    let history = useHistory();\n    const { data, actions } = useContext(Context);\n    const [ userValues, setUserValues ] = useState({\n        firstName: '',\n        lastName: '',\n        emailAddress: '',\n        password: '',\n        errors: []\n    });\n\n    // Destructuring for later use\n    const { errors } = userValues;\n\n    // Handler for changes in form inputs updates state\n    const change = (event) => {\n        setUserValues( prevValues => ({ \n            ...prevValues, \n            [event.target.name]: event.target.value \n        }));\n    };\n    \n    // Handler for form submit to create a new user\n    const submit = () => {\n        const { firstName, lastName, emailAddress, password } = userValues;\n        const user = { firstName, lastName, emailAddress, password };\n        const { from } = props.location.state || { from: { pathname: '/' } };\n        data.createUser(user)\n            .then( errs => {\n                if (errs.length) {\n                    setUserValues({errors: errs});\n                    document.querySelector('FORM').reset();\n                } else {\n                    actions.signIn(emailAddress, password)\n                        .then(() => history.push(from));\n                }\n            }).catch( err => {\n                console.log(err);\n                history.push('/error');\n            });\n    };\n\n    // Handler for the cancel button returns to default route (course list)\n    const cancel = () => {\n        history.push('/');\n    };\n\n    return (\n        <main>\n            <div className=\"form--centered\">\n                <h2>Sign Up</h2>\n                <Form\n                    cancel={cancel}\n                    errors={errors}\n                    submit={submit}\n                    submitButtonText=\"Sign Up\"\n                    elements={ () => (\n                        <>\n                            <label htmlFor=\"firstName\">First Name</label>\n                            <input \n                                id=\"firstName\" \n                                name=\"firstName\" \n                                type=\"text\"\n                                onChange={change} />\n                            \n                            <label htmlFor=\"lastName\">Last Name</label>\n                            <input \n                                id=\"lastName\" \n                                name=\"lastName\" \n                                type=\"text\"\n                                onChange={change} />\n                            \n                            <label htmlFor=\"emailAddress\">Email Address</label>\n                            <input \n                                id=\"emailAddress\" \n                                name=\"emailAddress\" \n                                type=\"email\"\n                                onChange={change} />\n                            \n                            <label htmlFor=\"password\">Password</label>\n                            <input \n                                id=\"password\" \n                                name=\"password\" \n                                type=\"password\"\n                                onChange={change} />\n                        </>\n                    )} />\n                <p>Already have an account? Click here to <Link to=\"/signin\">sign in</Link>!</p>\n            </div>\n        </main>\n    );\n};\n\nexport default UserSignUp;\n","/**\n * This component signs out the user and redirects  \n * to the default route (course list)\n */\nimport { useContext, useEffect } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { Context } from '../Context';\n\nconst UserSignOut = () => {\n    const { actions } = useContext(Context);\n    useEffect(() => actions.signOut());\n    return (\n        <Redirect to=\"/\" />\n    );\n};\n\nexport default UserSignOut;\n","/**\n * This component renders the \"Course Detail\" screen, with navigation buttons\n * for \"Update Course\" and \"Delete Course\"\n */\nimport { useState, useEffect, useContext } from 'react';\nimport { Link, useParams, Redirect } from 'react-router-dom';\nimport { Context } from '../Context';\nimport ReactMarkdown from 'react-markdown';\n\nconst CourseDetail = () => {\n    \n    const { id } = useParams();\n    const { data, authenticatedUser } = useContext(Context);\n    const [ course, setCourse ] = useState({});\n\n    useEffect(() => {\n        data.getCourse(id)\n            .then(course => setCourse(course));\n    }, [ data, id ]);\n        \n    if (course === null) {\n        return <Redirect to=\"/notfound\" />\n    } else {\n        return (\n            <main>\n                <div className=\"actions--bar\">\n                    <div className=\"wrap\">\n                        {/* Buttons for \"Update\" and \"Delete\" only appear if user is course owner */\n                        authenticatedUser && authenticatedUser.id === course.userId ?\n                            <>\n                            <Link className=\"button\" to={{\n                                pathname: `/courses/${id}/update`,\n                                state: {\n                                    courseUserID: course.userId\n                                }}}>Update Course</Link>\n                            <Link className=\"button\" to={{\n                                pathname: `/courses/${id}/delete`,\n                                state: {\n                                    courseUserID: course.userId\n                                }}}>Delete Course</Link>\n                            </>\n                            : null } \n                        <Link className=\"button button-secondary\" to=\"/\">Return to List</Link>\n                    </div>\n                </div>\n                \n                <div className=\"wrap\">\n                    <h2>Course Detail</h2>\n                    <form>\n                        <div className=\"main--flex\">\n                            <div>\n                                <h3 className=\"course--detail--title\">Course</h3>\n                                <h4 className=\"course--name\">{course.title}</h4>\n                                \n                                <p>\n                                { /* user name does not load with other course info for\n                                  some reason, which is why the conditional is used here */\n                                    course.user ? \n                                    (`By ${course.user.firstName} ${course.user.lastName}`)\n                                    : null }\n                                </p>\n                                \n                                <ReactMarkdown>{course.description}</ReactMarkdown>\n                            </div>\n                            <div>\n                                <h3 className=\"course--detail--title\">Estimated Time</h3>\n                                <p>{course.estimatedTime}</p>\n\n                                <h3 className=\"course--detail--title\">Materials Needed</h3>\n                                <ul className=\"course--detail--list\">\n                                    <ReactMarkdown>{course.materialsNeeded}</ReactMarkdown>\n                                </ul>\n                            </div>\n                        </div>\n                    </form>\n                </div>\n            </main>\n        );\n    }\n};\n\nexport default CourseDetail;","/**\n * This component renders a form allowing a user to create a new course\n * or cancel and return to the default route (course list)\n */\n import { useState, useContext } from 'react';\n import { useHistory } from 'react-router-dom';\n import { Context } from '../Context';\n import Form from './Form';\n \n const CreateCourse = () => {\n     \n     let history = useHistory();\n     let { data, authenticatedUser } = useContext(Context);\n     const [ course, setCourse ] = useState({});\n \n     // Destructuring for later use\n     const { firstName, lastName } = authenticatedUser;\n \n     // Handler for changes in form inputs updates state\n     const change = (event) => {\n         setCourse( prevValues => ({ \n             ...prevValues, \n             [event.target.name]: event.target.value \n         }));\n     };\n \n     // Handler for form submit button creates a new course listing\n     const submit = () => {\n         course.userId = authenticatedUser.id;\n         data.createCourse(course, authenticatedUser.emailAddress, authenticatedUser.password)\n             .then( errs => {\n                 if (errs.length) {\n                     console.log(errs);\n                     setCourse({errors: errs});\n                 } else {\n                    history.push('/');\n                 }\n             }).catch( err => {\n                 console.log(err);\n                 history.push('/error');\n             });\n     };\n \n     // Handler for the form cancel button returns to default route (course list)\n     const cancel = () => {\n         history.push('/');\n     };\n \n     return (\n         <main>\n             <div className=\"wrap\">\n                 <h2>Create Course</h2>\n                 <Form\n                     cancel={cancel}\n                     errors={course.errors}\n                     submit={submit}\n                     submitButtonText=\"Create Course\"\n                     elements={ () => (\n                         <div className=\"main--flex\">\n                             <div>\n                                 <label htmlFor=\"title\">Course Title</label>\n                                 <input \n                                     id=\"title\" \n                                     name=\"title\" \n                                     type=\"text\" \n                                     onChange={change} />\n \n                                 <p>By {firstName} {lastName}</p>\n \n                                 <label htmlFor=\"description\">Course Description</label>\n                                 <textarea \n                                     id=\"description\" \n                                     name=\"description\" \n                                     onChange={change} />\n                             </div>\n                             <div>\n                                 <label htmlFor=\"estimatedTime\">Estimated Time</label>\n                                 <input \n                                     id=\"estimatedTime\" \n                                     name=\"estimatedTime\" \n                                     type=\"text\" \n                                     onChange={change} />\n \n                                 <label htmlFor=\"materialsNeeded\">Materials Needed</label>\n                                 <textarea \n                                     id=\"materialsNeeded\" \n                                     name=\"materialsNeeded\" \n                                     onChange={change} />\n                             </div>\n                         </div>\n                     )} />\n             </div>\n         </main>\n     );\n }\n \n export default CreateCourse;\n","/**\n * This component renders a form allowing the user to update an existing\n * course or cancel and return to the \"Course Detail\" page\n */\nimport { useState, useContext, useEffect } from 'react';\nimport { useHistory, useParams, Redirect, useLocation } from 'react-router-dom';\nimport { Context } from '../Context';\nimport Form from './Form';\n\nconst UpdateCourse = () => {\n    \n    const { id } = useParams();\n    let history = useHistory();\n    let { data, authenticatedUser, validCourseIDs } = useContext(Context);\n    const [ course, setCourse ] = useState({});\n    const location = useLocation();\n    const { courseUserID } = location.state || 0;\n\n    useEffect(() => {\n        data.getCourse(id)\n            .then(course => setCourse(course));\n    }, [ data, id ]);\n\n    // Handler for changes in form inputs updates state\n    const change = (event) => {\n        setCourse( prevValues => ({ \n            ...prevValues, \n            [event.target.name]: event.target.value \n        }));\n    };\n\n    // Handler for form submit button updates the course object\n    const submit = () => {\n        data.updateCourse(id, course, authenticatedUser.emailAddress, authenticatedUser.password)\n            .then( errors => {\n                if (errors.length) {\n                    console.log(errors);\n                    setCourse({errors});\n                } else {\n                   history.push(`/courses/${id}`);\n                }\n            }).catch( err => {\n                console.log(err);\n                history.push('/error');\n            });\n    };\n\n    // Handler for form cancel button returns to \"Course Detail\" page\n    const cancel = () => {\n        history.push(`/courses/${id}`);\n    };\n        \n    // If the course is an empty object, redirect to \"Not Found\"\n    if (!validCourseIDs.includes(parseInt(id))) {\n        return <Redirect to=\"/notfound\" />;\n    // If the user is not the course owner, redirect to \"Forbidden\"\n    } else if (authenticatedUser.id !== courseUserID) {\n        return <Redirect to=\"/forbidden\" />;\n    // If course exists and user is owner, render the prepopulated form\n    } else {\n        return (\n            <main>\n                <div className=\"wrap\">\n                    <h2>Update Course</h2>\n                    <Form\n                        cancel={cancel}\n                        errors={course.errors}\n                        submit={submit}\n                        submitButtonText=\"Update Course\"\n                        elements={ () => (\n                            <div className=\"main--flex\">\n                                <div>\n                                    <label htmlFor=\"title\">Course Title</label>\n                                    <input \n                                        id=\"title\" \n                                        name=\"title\" \n                                        type=\"text\" \n                                        defaultValue={course.title} \n                                        onChange={change} />\n\n                                    <p>By {authenticatedUser.firstName} {authenticatedUser.lastName}</p>\n\n                                    <label htmlFor=\"description\">Course Description</label>\n                                    <textarea \n                                        id=\"description\" \n                                        name=\"description\" \n                                        defaultValue={course.description} \n                                        onChange={change} />\n                                </div>\n                                <div>\n                                    <label htmlFor=\"estimatedTime\">Estimated Time</label>\n                                    <input \n                                        id=\"estimatedTime\" \n                                        name=\"estimatedTime\" \n                                        type=\"text\" \n                                        defaultValue={course.estimatedTime} \n                                        onChange={change} />\n\n                                    <label htmlFor=\"materialsNeeded\">Materials Needed</label>\n                                    <textarea \n                                        id=\"materialsNeeded\" \n                                        name=\"materialsNeeded\" \n                                        defaultValue={course.materialsNeeded} \n                                        onChange={change} />\n                                </div>\n                            </div>\n                        )} />\n                </div>\n            </main>\n        );\n    }\n}\n\nexport default UpdateCourse;\n","/**\n * This component deletes the course ONLY if the user is the owner\n */\nimport { useContext } from 'react';\nimport { Context } from '../Context';\nimport { useParams, Redirect, useLocation } from 'react-router-dom';\n\nconst DeleteCourse = () => {\n\n    const { id } = useParams();\n    const { data, authenticatedUser, validCourseIDs } = useContext(Context);\n    const location = useLocation();\n    const { courseUserID } = location.state || 0;\n\n    // If course does not exist redirect to \"Not Found\"\n    if (!validCourseIDs.includes(parseInt(id))) {\n        return <Redirect to=\"/notfound\" />\n    // If user is not owner redirect to \"Forbidden\"\n    } else if (authenticatedUser.id !== courseUserID) {\n        return <Redirect to=\"/forbidden\" />\n    // If course exists and user is owner delete the course and redirect to course list\n    } else {\n        data.deleteCourse(id, authenticatedUser.emailAddress, authenticatedUser.password);\n        return (\n            <Redirect to=\"/\" />\n        );\n    }\n};\n\nexport default DeleteCourse;\n","/**\n * This component renders a message letting the\n * user know the requested page can't be found (404)\n */\nimport { Link } from 'react-router-dom';\n\nconst NotFound = () => {\n    return (\n        <main>\n            <div className=\"form--centered\">\n                <h2>Not Found</h2>\n                <p>Sorry, the requested page was not found.</p>\n                <Link className=\"button button-secondary\" to=\"/\">Return to Course List</Link>\n            </div>\n        </main>\n    );\n};\n\nexport default NotFound;\n","/**\n * This component renders a message etting the\n * user know they can't access the requested page\n */\nimport { Link } from 'react-router-dom';\n\nconst Forbidden = () => {\n    return (\n        <main>\n            <div className=\"form--centered\">\n                <h2>Access Denied</h2>\n                <p>Sorry, you do not have access permission.</p>\n                <Link className=\"button button-secondary\" to=\"/\">Return to Course List</Link>\n                <Link className=\"button button-secondary\" to=\"/signin\">Switch Accounts</Link>\n            </div>\n        </main>\n    );\n};\n\nexport default Forbidden;\n","/**\n * The component renders a message letting the user know\n * that an unexpected error has occured (500 error)\n */\nimport { Link } from 'react-router-dom';\n\nconst UnhandledError = () => {\n    return (\n        <main>\n            <div className=\"form--centered\">\n                <h2>Error</h2>\n                <p>Sorry, there was an internal error.</p>\n                <Link className=\"button button-secondary\" to=\"/\">Return to Course List</Link>\n            </div>\n        </main>\n    );\n};\n\nexport default UnhandledError;\n","import React from 'react';\n\nclass ErrorBoundary extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { hasError: false };\n    }\n  \n    static getDerivedStateFromError(error) {\n        // Update state so the next render will show the fallback UI.\n        return { hasError: true };\n    }\n  \n    componentDidCatch(error, errorInfo) {\n        // You can also log the error to an error reporting service\n        console.log(error, errorInfo);\n    }\n  \n    render() {\n        if (this.state.hasError) {\n            // You can render any custom fallback UI\n            return <h1>Something went wrong.</h1>;\n        }\n  \n        return this.props.children; \n    }\n}\n\nexport default ErrorBoundary;","import { BrowserRouter, Route, Switch } from 'react-router-dom';\n\nimport PrivateRoute from './PrivateRoute';\n\nimport Header from './Components/Header';\nimport Courses from './Components/Courses';\nimport UserSignIn from './Components/UserSignIn';\nimport UserSignUp from './Components/UserSignUp';\nimport UserSignOut from './Components/UserSignOut';\nimport CourseDetail from './Components/CourseDetail';\nimport CreateCourse from './Components/CreateCourse';\nimport UpdateCourse from './Components/UpdateCourse';\nimport DeleteCourse from './Components/DeleteCourse';\nimport NotFound from './Components/NotFound';\nimport Forbidden from './Components/Forbidden';\nimport UnhandledError from './Components/UnhandledError'\nimport ErrorBoundary from './Components/ErrorBoundary';\n\nfunction App() {\n    return (\n        <BrowserRouter /*forceRefresh={true}*/ basename='/thp10-fullStackApp'>\n            <ErrorBoundary>\n                <Header />\n                <Switch>\n                    <Route exact path=\"/\" component={Courses} />\n                    <PrivateRoute path=\"/courses/create\" component={CreateCourse} />\n                    <PrivateRoute path=\"/courses/:id/update\" component={UpdateCourse} />\n                    <PrivateRoute path=\"/courses/:id/delete\" component={DeleteCourse} />\n                    <Route path=\"/courses/:id\" component={CourseDetail} /> \n                    <Route path=\"/signin\" component={UserSignIn} />\n                    <Route path=\"/signup\" component={UserSignUp} />\n                    <Route path=\"/signout\" component={UserSignOut} />\n                    <Route path=\"/notfound\" component={NotFound} />\n                    <Route path=\"/forbidden\" component={Forbidden} />\n                    <Route path=\"/error\" component={UnhandledError} />\n                    <Route component={NotFound} />\n                </Switch>\n            </ErrorBoundary>\n        </BrowserRouter>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport './styles/reset.css';\nimport './styles/global.css';\nimport './styles/skillsacademy.css';\n\nimport { Provider } from './Context';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}